// Generated by CoffeeScript 1.10.0
(function() {
  var File, Http, LiveUpdate, Q, Zip, extend, msprintf, sprintf, xhr,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Q = require('q');

  File = require('qordova-file').File;

  Http = require('qordova-http').Http;

  Zip = require('qordova-zip').Zip;

  msprintf = require('sprintf-js');

  sprintf = msprintf.sprintf;

  extend = require('extend');

  xhr = require('xhr');

  LiveUpdate = (function() {
    function LiveUpdate(options) {
      this.install = bind(this.install, this);
      this.download = bind(this.download, this);
      this.loadApp = bind(this.loadApp, this);
      this.fetchLatestBuildInfo = bind(this.fetchLatestBuildInfo, this);
      this.go = bind(this.go, this);
      this.checkOnce = bind(this.checkOnce, this);
      this.stopCheckingRepeatedly = bind(this.stopCheckingRepeatedly, this);
      this.checkRepeatedly = bind(this.checkRepeatedly, this);
      this.options = {
        updateUrl: null,
        originalBuildId: null,
        appEntryPoint: 'app.html',
        localStorageVar: 'buildno',
        recheckTimeoutMs: 5000,
        afterUpdateAvailable: (function(_this) {
          return function(current_id, latest_id) {
            var d;
            d = Q.defer();
            d.resolve();
            return d.promise;
          };
        })(this),
        afterDownloadComplete: (function(_this) {
          return function(current_id, latest_id) {
            var d, res;
            d = Q.defer();
            res = confirm(sprintf("Version %d is available for download (you are running %d). Update now?", latest_id, current_id));
            if (res != null) {
              d.resolve();
            } else {
              d.reject();
            }
            return d.promise;
          };
        })(this),
        afterInstallComplete: (function(_this) {
          return function(current_id, latest_id) {
            var d;
            d = Q.defer();
            d.resolve();
            return d.promise;
          };
        })(this),
        beforeReboot: (function(_this) {
          return function(id_to_load) {
            var d;
            d = Q.defer();
            d.resolve();
            return d.promise;
          };
        })(this),
        getCurrentBuildId: (function(_this) {
          return function() {
            return Math.max(parseInt(localStorage.getItem(_this.options.localStorageVar)), _this.options.originalBuildId);
          };
        })(this),
        setCurrentBuildId: (function(_this) {
          return function(build_id) {
            return localStorage.setItem(_this.options.localStorageVar, build_id);
          };
        })(this),
        bundleRoot: cordova.file.dataDirectory
      };
      extend(this.options, options);
      if (!this.options.updateUrl || !this.options.originalBuildId) {
        alert('LiveUpdater *requres* update URL and original build ID');
        throw new Exception('LiveUpdater *requres* update URL and original build ID');
      }
    }

    LiveUpdate.prototype.checkRepeatedly = function(timeoutMs) {
      var again;
      this.keepChecking = true;
      again = (function(_this) {
        return function() {
          return _this.checkOnce().then(function() {}).fail(function(err) {
            return console.log("Check failed", err);
          })["finally"](function() {
            if (_this.keepChecking) {
              return setTimeout(again, timeoutMs || _this.options.recheckTimeoutMs);
            }
          });
        };
      })(this);
      return again();
    };

    LiveUpdate.prototype.stopCheckingRepeatedly = function() {
      return this.keepChecking = false;
    };

    LiveUpdate.prototype.checkOnce = function() {
      var current_build_id, d;
      d = Q.defer();
      current_build_id = this.options.getCurrentBuildId();
      console.log("Current build version is ", current_build_id);
      this.fetchLatestBuildInfo().then((function(_this) {
        return function(latest_build_id) {
          if (latest_build_id <= current_build_id) {
            console.log("We have the latest build, no action needed");
            return;
          }
          console.log("Update is requested");
          return _this.options.afterUpdateAvailable(current_build_id, latest_build_id).then(function() {
            return _this.download(latest_build_id);
          }).then(function() {
            return _this.options.afterDownloadComplete(current_build_id, latest_build_id);
          }).then(function() {
            return _this.install(latest_build_id);
          }).then(function() {
            return _this.options.afterInstallComplete(current_build_id, latest_build_id);
          }).then(function() {
            return _this.loadApp(latest_build_id);
          });
        };
      })(this)).fail((function(_this) {
        return function(err) {
          console.log("Check failed or was aborted", err);
          return d.reject(err);
        };
      })(this))["finally"]((function(_this) {
        return function() {
          console.log("Done trying to download and install.");
          return d.resolve();
        };
      })(this));
      return d.promise;
    };

    LiveUpdate.prototype.go = function() {
      return this.checkOnce().then((function(_this) {
        return function(build_id) {
          console.log("Loading app", arguments);
          return _this.loadApp(build_id);
        };
      })(this)).fail((function(_this) {
        return function(err) {
          console.log("Check failed, loading current local build of app.", err);
          return _this.loadApp(_this.options.getCurrentBuildId());
        };
      })(this));
    };

    LiveUpdate.prototype.fetchLatestBuildInfo = function() {
      var deferred;
      deferred = Q.defer();
      console.log("Fetching latest build version info");
      xhr(sprintf('%s/liveupdate.json?r=%d', this.options.updateUrl, (new Date()).getTime()), (function(err, response, body) {
        var latest_build_id;
        if (response.statusCode === 200) {
          latest_build_id = JSON.parse(response.body);
          console.log("Latest build on server is ", latest_build_id);
          return deferred.resolve(latest_build_id);
        } else {
          console.log("Error fetching version info", err, response);
          return deferred.reject(err);
        }
      }));
      return deferred.promise;
    };

    LiveUpdate.prototype.loadApp = function(build_id) {
      var app_html, new_app_html;
      if (!this.options.beforeReboot(build_id)) {
        return;
      }
      app_html = this.options.appEntryPoint;
      if (build_id) {
        new_app_html = sprintf("%s%s/%s", this.options.bundleRoot, build_id, this.options.appEntryPoint);
        return File.exists(app_html).then(function() {
          console.log("New app exists", new_app_html);
          return app_html = new_app_html;
        }).fail(function() {
          return console.log("New app is missing, using default");
        })["finally"](function() {
          console.log("Navigating to ", app_html);
          return window.location = app_html;
        });
      } else {
        console.log("Navigating to ", app_html);
        return window.location = app_html;
      }
    };

    LiveUpdate.prototype.download = function(build_id) {
      var deferred, unzip_dir, url, zip_fname;
      deferred = Q.defer();
      zip_fname = sprintf("%s%s.zip", this.options.bundleRoot, build_id);
      unzip_dir = sprintf("%s%s", this.options.bundleRoot, build_id);
      url = sprintf("%s/%d.zip", this.options.updateUrl, build_id);
      Q.all([File.rm(zip_fname), File.rm(unzip_dir)]).then((function(_this) {
        return function() {
          return Http.download(url, zip_fname);
        };
      })(this)).then((function(_this) {
        return function() {
          return Zip.unzip(zip_fname, unzip_dir);
        };
      })(this)).then((function(_this) {
        return function() {
          console.log("New build version is ", build_id);
          _this.options.setCurrentBuildId(build_id);
          return deferred.resolve();
        };
      })(this)).fail((function(_this) {
        return function(err) {
          console.log("Install failed", arguments);
          return deferred.reject(err);
        };
      })(this));
      return deferred.promise;
    };

    LiveUpdate.prototype.install = function(build_id) {
      var d;
      d = Q.defer();
      console.log("New build version is ", build_id);
      this.options.setCurrentBuildId(build_id);
      d.resolve();
      return d.promise;
    };

    return LiveUpdate;

  })();

  module.exports = LiveUpdate;

}).call(this);
